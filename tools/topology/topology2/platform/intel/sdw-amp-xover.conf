# route and pipeline index start from pcm id * 10

Define {
	SDW_SPK_STREAM 'SDW1-Playback'
	SDW_SPK_IN_STREAM 'SDW1-Capture'
	ALH_2ND_SPK_ID 22
	ALH_3RD_SPK_ID 23
	ALH_2ND_SPK_IN_ID 32
	ALH_3RD_SPK_IN_ID 33
	SDW_AMP_BE_ID 2
	SDW_AMP_IN_BE_ID 3
	AMP_FEEDBACK_CH 2
	AMP_FEEDBACK_CH_PER_LINK 2
	SDW_AMP_FEEDBACK true
	AMP_PLAYBACK_NAME 'Speaker Playback'
}

Object.Dai.ALH [
	{
		dai_index 20
		id		$SDW_AMP_BE_ID
		direction	"playback"
		name		$SDW_SPK_STREAM
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config.1 {
			id	0
			name	"ALH514"
		}
	}
]

Object.Pipeline {
	host-copier-gain-mixin-playback [
		{
			index 20

			Object.Widget.host-copier.1 {
				stream_name "sdw amplifiers"
				pcm_id 2
			}
			Object.Widget.gain.1 {
				Object.Control.mixer.1 {
					name 'Pre Mixer $AMP_PLAYBACK_NAME Volume'
				}
			}
		}
	]

	IncludeByKey.SDW_SPK_ENHANCED_PLAYBACK {
		"true" {
			mixout-gain-eqiir-eqfir-drc-micsel-eqiir-eqfir-alh-dai-copier-playback [
				{
					index 21
					Object.Widget.alh-copier.1 {
						stream_name $SDW_SPK_STREAM
						node_type $ALH_LINK_OUTPUT_CLASS
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_bit_depth		32
								in_valid_bit_depth	32
								in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_bit_depth		32
								out_valid_bit_depth	$SDW_LINK_VALID_BITS
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
						]
					}
					Object.Widget.gain.1 {
						Object.Control.mixer.1 {
							name 'Post Mixer $AMP_PLAYBACK_NAME Volume'
						}
					}
					Object.Widget.eqiir.1 {
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME IIR Eq bytes'
						}
					}
					Object.Widget.eqfir.1 {
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME FIR Eq bytes'
						}
					}
					Object.Widget.drc.1 {
						Object.Control {
							bytes."1" {
								name 'Post Mixer $AMP_PLAYBACK_NAME DRC bytes'
							}
							mixer."1" {
								name 'Post Mixer $AMP_PLAYBACK_NAME DRC switch'
							}
						}
					}
					Object.Widget.micsel.1 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]

						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover Selector bytes'
						}
					}
					Object.Widget.eqiir.2 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_channels		$SDW_AMP_NUM_CHANNELS
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover IIR bytes'
						}
					}
					Object.Widget.eqfir.2 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_channels		$SDW_AMP_NUM_CHANNELS
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover FIR bytes'
						}
					}
				}
			]
		}
		"false" {
			mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback [
				{
					index 21
					Object.Widget.alh-copier.1 {
						stream_name $SDW_SPK_STREAM
						node_type $ALH_LINK_OUTPUT_CLASS
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_bit_depth		32
								in_valid_bit_depth	32
								in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_bit_depth		32
								out_valid_bit_depth	$SDW_LINK_VALID_BITS
								out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
								out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
							}
						]
					}
					Object.Widget.gain.1 {
						Object.Control.mixer.1 {
							name 'Post Mixer $AMP_PLAYBACK_NAME Volume'
						}
					}
					Object.Widget.micsel.1 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]

						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover Selector bytes'
						}
					}
					Object.Widget.eqiir.2 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_channels		$SDW_AMP_NUM_CHANNELS
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover IIR bytes'
						}
					}
					Object.Widget.eqfir.2 {
						num_input_audio_formats 1
						Object.Base.input_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										in_ch_cfg $CHANNEL_CONFIG_STEREO
										in_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										in_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								in_channels		$SDW_AMP_NUM_CHANNELS
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						num_output_audio_formats 1
						Object.Base.output_audio_format [
							{
								IncludeByKey.SDW_AMP_NUM_CHANNELS {
									"2" {
										out_ch_cfg $CHANNEL_CONFIG_STEREO
										out_ch_map $CHANNEL_MAP_STEREO
									}
									"4" {
										out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
										out_ch_map $CHANNEL_MAP_3_POINT_1
									}
								}
								out_channels		$SDW_AMP_NUM_CHANNELS
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
						Object.Control.bytes."1" {
							name 'Post Mixer $AMP_PLAYBACK_NAME Xover FIR bytes'
						}
					}
				}
			]
		}
	}
}

IncludeByKey.NUM_SDW_AMP_LINKS {
"2"	{
		Define {
			AMP_FEEDBACK_CH 4
			AMP_FEEDBACK_CH_PER_LINK 2
		}

		Object.Widget {
			alh-copier [
				{
					index $ALH_2ND_SPK_ID
					type dai_in
					stream_name	$SDW_SPK_STREAM
					dai_index	1
					type		"dai_in"
					direction	"playback"
					node_type $ALH_LINK_OUTPUT_CLASS
					num_input_audio_formats 1
					num_output_audio_formats 1
					num_input_pins 1
					Object.Base.input_audio_format [
						{
							IncludeByKey.SDW_AMP_NUM_CHANNELS {
								"2" {
									in_ch_cfg $CHANNEL_CONFIG_STEREO
									in_ch_map $CHANNEL_MAP_STEREO
								}
								"4" {
									in_ch_cfg $CHANNEL_CONFIG_3_POINT_1
									in_ch_map $CHANNEL_MAP_3_POINT_1
								}
							}
							in_bit_depth		32
							in_valid_bit_depth	32
							in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
						}
					]
					Object.Base.output_audio_format [
						{
							IncludeByKey.SDW_AMP_NUM_CHANNELS {
								"2" {
									out_ch_cfg $CHANNEL_CONFIG_STEREO
									out_ch_map $CHANNEL_MAP_STEREO
								}
								"4" {
									out_ch_cfg $CHANNEL_CONFIG_3_POINT_1
									out_ch_map $CHANNEL_MAP_3_POINT_1
								}
							}
							out_bit_depth		32
							out_valid_bit_depth	$SDW_LINK_VALID_BITS
							out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
						}
					]
				}
			]
			IncludeByKey.SDW_AMP_FEEDBACK {
				"true" {
					alh-copier [
						{
							index $ALH_2ND_SPK_IN_ID
							type dai_out
							stream_name	$SDW_SPK_IN_STREAM
							dai_index	1
							type		"dai_out"
							direction	"capture"
							node_type $ALH_LINK_INPUT_CLASS
							num_input_audio_formats 1
							num_output_audio_formats 1
							num_output_pins 1

							Object.Base.input_audio_format [
								{
									in_channels		$AMP_FEEDBACK_CH
									in_bit_depth		32
									in_valid_bit_depth	$SDW_LINK_VALID_BITS
									in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
									in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
								}
							]
							Object.Base.output_audio_format [
								{
									out_channels		$AMP_FEEDBACK_CH
									out_bit_depth		 32
									out_valid_bit_depth	 32
								}
							]
						}
					]
				}
			}
			pipeline [
				{
					index		$ALH_2ND_SPK_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
				{
					index		$ALH_2ND_SPK_IN_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
			]
			# Add a virtual widget to connect the aggregated 2nd DAI copier
			virtual [
				{
					name 'virtual.sdw-amp'
					type output
					index $ALH_2ND_SPK_ID
				}
			]
		}

		# Add the connection from the gain module to the aggregated 2nd DAI copier
		# via the virtual widget. The virtual widget ensures that the routes between
		# the gain and copier do not get established in the firmware. These are purely
		# to show the existence of aggregation in the topology graph.
		Object.Base.route [
			{
				source	"eqfir.21.2"
				sink	"virtual.sdw-amp"
			}
			{
				source	"virtual.sdw-amp"
				sink	"alh-copier.$SDW_SPK_STREAM.1"
			}
		]
	}

"3"	{
		Define {
			AMP_FEEDBACK_CH 6
			AMP_FEEDBACK_CH_PER_LINK 2
		}

		Object.Widget {
			alh-copier [
				{
					index $ALH_2ND_SPK_ID
					type dai_in
					stream_name	$SDW_SPK_STREAM
					dai_index	1
					type		"dai_in"
					direction	"playback"
					node_type $ALH_LINK_OUTPUT_CLASS
					num_input_audio_formats 1
					num_output_audio_formats 1
					num_input_pins 1
					Object.Base.input_audio_format [
						{
							in_bit_depth		32
							in_valid_bit_depth	32
						}
					]
					Object.Base.output_audio_format [
						{
							out_bit_depth		 32
							out_valid_bit_depth	 $SDW_LINK_VALID_BITS
							out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
						}
					]
				}
				{
					index $ALH_3RD_SPK_ID
					type dai_in
					stream_name	$SDW_SPK_STREAM
					dai_index	2
					type		"dai_in"
					direction	"playback"
					node_type $ALH_LINK_OUTPUT_CLASS
					num_input_audio_formats 1
					num_output_audio_formats 1
					num_input_pins 1
					Object.Base.input_audio_format [
						{
							in_bit_depth		32
							in_valid_bit_depth	32
						}
					]
					Object.Base.output_audio_format [
						{
							out_bit_depth		 32
							out_valid_bit_depth	 $SDW_LINK_VALID_BITS
							out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
						}
					]
				}
			]
			IncludeByKey.SDW_AMP_FEEDBACK {
				"true" {
					alh-copier [
						{
							index $ALH_2ND_SPK_IN_ID
							type dai_out
							stream_name	$SDW_SPK_IN_STREAM
							dai_index	1
							type		"dai_out"
							direction	"capture"
							node_type $ALH_LINK_INPUT_CLASS
							num_input_audio_formats 1
							num_output_audio_formats 1
							num_output_pins 1

							Object.Base.input_audio_format [
								{
									in_channels		$AMP_FEEDBACK_CH
									in_bit_depth		32
									in_valid_bit_depth	$SDW_LINK_VALID_BITS
									in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
									in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
								}
							]
							Object.Base.output_audio_format [
								{
									out_channels		$AMP_FEEDBACK_CH
									out_bit_depth		 32
									out_valid_bit_depth	 32
								}
							]
						}
						{
							index $ALH_3RD_SPK_IN_ID
							type dai_out
							stream_name	$SDW_SPK_IN_STREAM
							dai_index	2
							type		"dai_out"
							direction	"capture"
							node_type $ALH_LINK_INPUT_CLASS
							num_input_audio_formats 1
							num_output_audio_formats 1
							num_output_pins 1

							Object.Base.input_audio_format [
								{
									in_bit_depth		32
									in_valid_bit_depth	$SDW_LINK_VALID_BITS
									in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
									in_channels		$AMP_FEEDBACK_CH
									in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
								}
							]
							Object.Base.output_audio_format [
								{
									out_bit_depth		 32
									out_valid_bit_depth	 32
								}
							]
						}
					]
				}
			}
			pipeline [
				{
					index		$ALH_2ND_SPK_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
				{
					index		$ALH_3RD_SPK_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
				{
					index		$ALH_2ND_SPK_IN_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
				{
					index		$ALH_3RD_SPK_IN_ID
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
			]
			virtual [
				{
					name 'virtual.sdw-amp'
					type output
					index $ALH_2ND_SPK_ID
				}
				{
					name 'virtual.sdw-amp'
					type output
					index $ALH_3RD_SPK_ID
				}
			]
		}

		# Add the connection from the gain module to the aggregated 2nd DAI copier
		# via the virtual widget. The virtual widget ensures that the routes between
		# the gain and copier do not get established in the firmware. These are purely
		# to show the existence of aggregation in the topology graph.
		Object.Base.route [
			{
				source	"gain.21.1"
				sink	"virtual.sdw-amp"
			}
			{
				source	"virtual.sdw-amp"
				sink	"alh-copier.$SDW_SPK_STREAM.1"
			}
			{
				source	"virtual.sdw-amp"
				sink	"alh-copier.$SDW_SPK_STREAM.2"
			}
		]
	}
}

Object.PCM.pcm [
	{
		name	"Speaker"
		id 2
		direction	"playback"
		Object.Base.fe_dai.1 {
			name	"Speaker"
		}

		Object.PCM.pcm_caps.1 {
			name "sdw amplifiers"
			formats 'S16_LE,S24_LE,S32_LE'
		}
	}
]

Object.Base.route [
	{
		source	"eqfir.21.2"
		sink	"alh-copier.$SDW_SPK_STREAM.0"
	}
	{
		source 'mixin.20.1'
		sink 'mixout.21.1'
	}
	{
		source 'host-copier.2.playback'
		sink 'gain.20.1'
	}
]

IncludeByKey.SDW_AMP_FEEDBACK {
	"true" {
		Object.Dai.ALH [
			{
				dai_index 30
				id		$SDW_AMP_IN_BE_ID
				direction	"capture"
				name		$SDW_SPK_IN_STREAM
				default_hw_conf_id	1
				rate			48000
				channels		$AMP_FEEDBACK_CH_PER_LINK

				Object.Base.hw_config.1 {
					id	1
					name	"ALH515"
				}
			}
		]
		Object.Pipeline {
			host-gateway-capture [
				{
					index 30

					Object.Widget.host-copier.1 {
						stream_name	"amp feedback"
						pcm_id 3

						IncludeByKey.AMP_FEEDBACK_CH {
						"4" {
							num_input_audio_formats 1
							num_output_audio_formats 3
							Object.Base.input_audio_format [
								{
									in_channels		4
									in_bit_depth		32
									in_valid_bit_depth	32
									in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									in_ch_map	$CHANNEL_MAP_3_POINT_1
								}
							]
							Object.Base.output_audio_format [
								{
									out_channels		4
									out_bit_depth		32
									out_valid_bit_depth	24
									out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									out_ch_map	$CHANNEL_MAP_3_POINT_1
								}
								{
									out_channels		4
									out_bit_depth		32
									out_valid_bit_depth	32
									out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									out_ch_map	$CHANNEL_MAP_3_POINT_1
								}
								{
									out_channels		4
									out_bit_depth		16
									out_valid_bit_depth	16
									out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									out_ch_map	$CHANNEL_MAP_3_POINT_1
								}
							]
						}
						"6" {
							num_input_audio_formats 1
							num_output_audio_formats 3
							Object.Base.input_audio_format [
								{
									in_channels		6
									in_bit_depth		32
									in_valid_bit_depth	32
									in_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									in_ch_map	$CHANNEL_MAP_5_POINT_1
								}
							]
							Object.Base.output_audio_format [
								{
									out_channels		6
									out_bit_depth		32
									out_valid_bit_depth	24
									out_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									out_ch_map	$CHANNEL_MAP_5_POINT_1
								}
								{
									out_channels		6
									out_bit_depth		32
									out_valid_bit_depth	32
									out_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									out_ch_map	$CHANNEL_MAP_5_POINT_1
								}
								{
									out_channels		6
									out_bit_depth		16
									out_valid_bit_depth	16
									out_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									out_ch_map	$CHANNEL_MAP_5_POINT_1
								}
							]
						}
						"8" {
							num_input_audio_formats 1
							num_output_audio_formats 3
							Object.Base.input_audio_format [
								{
									in_channels		8
									in_bit_depth		32
									in_valid_bit_depth	32
									in_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									in_ch_map	$CHANNEL_MAP_7_POINT_1
								}
							]
							Object.Base.output_audio_format [
								{
									out_channels		8
									out_bit_depth		32
									out_valid_bit_depth	24
									out_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									out_ch_map	$CHANNEL_MAP_7_POINT_1
								}
								{
									out_channels		8
									out_bit_depth		32
									out_valid_bit_depth	32
									out_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									out_ch_map	$CHANNEL_MAP_7_POINT_1
								}
								{
									out_channels		8
									out_bit_depth		16
									out_valid_bit_depth	16
									out_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									out_ch_map	$CHANNEL_MAP_7_POINT_1
								}
							]
						}
						}
					}
				}
			]
		}
		Object.Widget {
			alh-copier [
				{
					index 31
					type dai_out
					stream_name	$SDW_SPK_IN_STREAM
					type		"dai_out"
					direction	"capture"
					node_type $ALH_LINK_INPUT_CLASS
					num_input_audio_formats 1
					num_output_audio_formats 1
					num_output_pins 1

					Object.Base.input_audio_format [
						{
							in_channels		$AMP_FEEDBACK_CH
							in_bit_depth		32
							in_valid_bit_depth	$SDW_LINK_VALID_BITS

							IncludeByKey.AMP_FEEDBACK_CH {
								"2" {
									in_ch_cfg	$CHANNEL_CONFIG_STEREO
									in_ch_map	$CHANNEL_MAP_STEREO
								}
								"4" {
									in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									in_ch_map	$CHANNEL_MAP_3_POINT_1
								}
								"6" {
									in_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									in_ch_map	$CHANNEL_MAP_5_POINT_1
								}
								"8" {
									in_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									in_ch_map	$CHANNEL_MAP_7_POINT_1
								}
							}

							in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
							in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
						}
					]
					Object.Base.output_audio_format [
						{
							out_channels		$AMP_FEEDBACK_CH
							out_bit_depth		32
							out_valid_bit_depth	32

							IncludeByKey.AMP_FEEDBACK_CH {
								"2" {
									out_ch_cfg	$CHANNEL_CONFIG_STEREO
									out_ch_map	$CHANNEL_MAP_STEREO
								}
								"4" {
									out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
									out_ch_map	$CHANNEL_MAP_3_POINT_1
								}
								"6" {
									out_ch_cfg	$CHANNEL_CONFIG_5_POINT_1
									out_ch_map	$CHANNEL_MAP_5_POINT_1
								}
								"8" {
									out_ch_cfg	$CHANNEL_CONFIG_7_POINT_1
									out_ch_map	$CHANNEL_MAP_7_POINT_1
								}
							}
						}
					]
				}
			]
			pipeline [
				{
					index		31
					priority	0
					lp_mode	0
					dynamic_pipeline 1
				}
			]
		}
		Object.PCM.pcm [
			{
				name	"Amp feedback"
				id 3
				direction	"capture"
				Object.Base.fe_dai.1 {
					name	"Amp feedback"
				}

				Object.PCM.pcm_caps.1 {
					name "amp feedback"
					formats 'S16_LE,S24_LE,S32_LE'
					channels_min $AMP_FEEDBACK_CH
					channels_max $AMP_FEEDBACK_CH
				}
			}
		]
		Object.Base.route [
			{
				source	"alh-copier.$SDW_SPK_IN_STREAM.0"
				sink	"host-copier.3.capture"
			}
		]
	}
}
