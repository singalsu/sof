#
# BE playback pipeline: mixout-gain-micsel-eqiir-eqfir-alh-dai-copier.
#
# All attributes defined herein are namespaced
# by alsatplg to "Object.Pipeline.mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback.N.attribute_name"
#
# Usage: mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback pipeline object can be instantiated as:
#
# Object.Pipeline.mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback."N" {
#	time_domain	"timer"
# }
#
# Where N is the unique pipeline ID within the same alsaconf node.
#

<include/pipelines/cavs/mixout-gain-alh-dai-copier-playback.conf>
<include/components/micsel.conf>

Class.Pipeline."mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback" {

	SubTreeCopy.baseclass {
		# this class extends the pipeline class.
		source "Class.Pipeline.mixout-gain-alh-dai-copier-playback"

		# target node is not defined which means that the new subtree will be copied to
		# the parent node containing the SubTreeCopy node i.e in this case the
		# Class.Pipeline.mixout-gain-micsel-eqiir-eqfir-alh-dai-copier-playback {} node.

		# default copy type is to extend the base class ie the widgets and routes
		# will be added to the existing list of widgets/routes in the base class

		tree {
			Object.Widget {
				micsel."1" {
					num_input_audio_formats	1
					Object.Base.input_audio_format [
						{
							in_bit_depth		32
							in_valid_bit_depth	32
						}
					]
					num_output_audio_formats 1
					Object.Base.output_audio_format [
						{
							out_channels		$SDW_AMP_NUM_CHANNELS
							out_bit_depth		32
							out_valid_bit_depth	32
						}
					]
					Object.Control {
						bytes."1" {
							IncludeByKey.SDW_AMP_XOVER_SELECTOR_PARAMS {
								"default" "include/components/micsel/passthrough.conf"
								"xover_selector_lr_to_llrr" "include/components/micsel/xover_selector_lr_to_llrr.conf"
								"xover_selector_lr_to_lrlr" "include/components/micsel/xover_selector_lr_to_lrlr.conf"
							}
						}
					}
				}

				eqiir."2" {
					num_input_audio_formats	1
					Object.Base.input_audio_format [
						{
							in_channels		$SDW_AMP_NUM_CHANNELS
							in_bit_depth		32
							in_valid_bit_depth	32
						}
					]
					num_output_audio_formats 1
					Object.Base.output_audio_format [
						{
							out_channels		$SDW_AMP_NUM_CHANNELS
							out_bit_depth		32
							out_valid_bit_depth	32
						}
					]
					Object.Control.bytes."1" {
						IncludeByKey.SDW_AMP_XOVER_EQIIR_PARAMS {
							"default"	"include/components/eqiir/passthrough.conf"
							"xover_lr4_2000hz_lhlh_48khz" "include/components/eqiir/xover_lr4_2000hz_lhlh_48khz.conf"
							"xover_lr4_2000hz_llhh_48khz" "include/components/eqiir/xover_lr4_2000hz_llhh_48khz.conf"
							"xover_lr4_2000hz_hhll_48khz" "include/components/eqiir/xover_lr4_2000hz_hhll_48khz.conf"
						}
					}
				}
				eqfir."2" {
					num_input_audio_formats	1
					Object.Base.input_audio_format [
						{
							in_channels		$SDW_AMP_NUM_CHANNELS
							in_bit_depth		32
							in_valid_bit_depth	32
						}
					]
					num_output_audio_formats 1
					Object.Base.output_audio_format [
						{
							out_channels		$SDW_AMP_NUM_CHANNELS
							out_bit_depth		32
							out_valid_bit_depth	32
						}
					]
					Object.Control.bytes."1" {
						IncludeByKey.SDW_AMP_XOVER_EQFIR_PARAMS {
							"default"			"include/components/eqfir/passthrough.conf"
							"xover_dd00_100us_48khz.conf"	"include/components/eqfir/xover_dd00_100us_48khz.conf"
							"xover_00dd_100us_48khz.conf"	"include/components/eqfir/xover_00dd_100us_48khz.conf"
						}
					}
				}
			}

			Object.Base {
				!route [
					{
						source	gain.$index.1
						sink	micsel.$index.1
					}
					{
						source	micsel.$index.1
						sink	eqiir.$index.2
					}
					{
						source	eqiir.$index.2
						sink	eqfir.$index.2
					}
				]
			}
		}
	}
}
